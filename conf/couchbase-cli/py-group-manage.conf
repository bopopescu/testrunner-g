clitest.couchbase_clitest.CouchbaseCliTest:
    # No tests for group-manage --list

    # Test create group
    testGroupManage,username=Administrator,password=password,create=True,name=new_group,expect-error=False
    # Test create group that already exists
    testGroupManage,init-group=new_group,username=Administrator,password=password,create=True,name=new_group,expect-error=True,error-msg=name - already exists
    # Test create group without a group name
    testGroupManage,username=Administrator,password=password,create=True,expect-error=True,error-msg=--group-name is required with --create flag

    # Test group delete
    testGroupManage,init-group=new_group,username=Administrator,password=password,delete=True,name=new_group,expect-error=False
    # Test group delete when group doesn't exist
    testGroupManage,username=Administrator,password=password,delete=True,name=new_group,expect-error=True,error-msg=Group `new_group` not found
    # Test group delete with no group name
    testGroupManage,username=Administrator,password=password,delete=True,expect-error=True,error-msg=--group-name is required with --delete flag
    # Test group delete with non-empty group
    testGroupManage,username=Administrator,password=password,delete=True,name="Group 1",expect-error=True,error-msg=_ - group is not empty

    # Test group rename
    testGroupManage,init-group=new_group,username=Administrator,password=password,rename=newer_group,name=new_group,expect-error=False
    # Test group rename when the group doesn't exist
    testGroupManage,init-group=new_group,username=Administrator,password=password,rename=bad_group,name=newer_group,expect-error=True,error-msg=Group `newer_group` not found
    # Test group rename with no group name
    testGroupManage,init-group=new_group,username=Administrator,password=password,rename=new_group,expect-error=True,error-msg=--group-name is required with --rename option

    # Test move server (single and multiple servers)
    testGroupManage,init-group=new_group,username=Administrator,password=password,move-servers=1,from-group="Group 1",to-group=new_group,expect-error=False
    testGroupManage,init-group=new_group,init-num-servers=2,username=Administrator,password=password,move-servers=2,from-group="Group 1",to-group=new_group,expect-error=False
    # Test move servers when the server doesn't exist
    testGroupManage,init-group=new_group,username=Administrator,password=password,invalid-move-server=invalid:8091,from-group="Group 1",to-group=new_group,expect-error=True,error-msg=Can't move invalid:8091 because it doesn't exist in 'Group 1'
    # Test move servers when the from group doesn't exist
    testGroupManage,init-group=new_group,username=Administrator,password=password,move-servers=1,from-group=old_group,to-group=new_group,expect-error=True,error-msg=Group to move servers from `old_group` not found
    # Test move servers when the to group doesn't exist
    testGroupManage,username=Administrator,password=password,move-servers=1,from-group="Group 1",to-group=new_group,expect-error=True,error-msg=Group to move servers to `new_group` not found

    # Test group manage when more than one of --list, --move-servers, --create, --delete, or --rename is used
    testGroupManage,username=Administrator,password=password,create=True,delete=True,name=new_group,expect-error=True,error-msg=Only one of the following may be specified: --create, --delete, --list, --move-servers, or --rename
    # Test group manage when none of --list, --move-servers, --create, --delete, or --rename are used
    testGroupManage,username=Administrator,password=password,expect-error=True,error-msg=Must specify one of the following: --create, --delete, --list, --move-servers, or --rename

    # Verify that invalid username and password fail
    testGroupManage,username=myusername,password=mypassword,create=True,name=new_group,expect-error=True,error-msg=unable to access the REST API - please check your username (-u) and password (-p)
    # Verify that running against an uninitialized cluster fails
    testGroupManage,initialized=True,username=Administrator,password=password,create=True,name=new_group,initialized=False,expect-error=True,error-msg=Cluster is not initialized, use cluster-init to initialize the cluster